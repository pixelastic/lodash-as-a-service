#!/bin/env zsh

# Test suite for Lodash as a Service
# New syntax: /{input}/{method1:arg1:arg2}/{method2}/...

BASE_URL="http://localhost:3000"
PASSED=0
FAILED=0

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test function
test_endpoint() {
  local description="$1"
  local url="$2"
  local expected="$3"

  echo -n "Testing: $description... "

  # Make request and extract result field
  local actual=$(curl -s "$BASE_URL$url" | jq -r '.result' 2>/dev/null)

  if [ "$actual" = "$expected" ]; then
    echo -e "${GREEN}âœ“ PASS${NC}"
    ((PASSED++))
  else
    echo -e "${RED}âœ— FAIL${NC}"
    echo "  URL:       $BASE_URL$url"
    echo "  Expected: '$expected'"
    echo "  Got:      '$actual'"
    ((FAILED++))
  fi
}

# Test if server is running
echo "Checking if server is running..."
if ! curl -s "$BASE_URL/health" >/dev/null; then
  echo -e "${RED}Error: Server not running on $BASE_URL${NC}"
  echo "Please run: npm start"
  exit 1
fi
echo -e "${GREEN}Server is running!${NC}"
echo

# Run tests
echo "Running Lodash as a Service tests..."
echo "===================================="

# Test 1: Simple camelCase (main use case)
test_endpoint "Simple camelCase" "/hello_world/camelCase" "helloWorld"

# Test 2: Chain with replace
test_endpoint "Replace then camelCase" "/user_first_name/replace:_:%20/camelCase" "userFirstName"

# Test 3: Spaces handling
test_endpoint "Spaces with trim and camelCase" "/hello%20world/trim/camelCase/upperFirst" "HelloWorld"

# Test 4: String manipulation with arguments (using take instead of slice)
test_endpoint "PadStart then take" "/hello/padStart:10:*/split:/take:8/join:" "*****hel"

# Test 5: Array operations via split
test_endpoint "Array operations" "/1,2,null,3,,4/split:,/compact/join:," "1,2,null,3,4"

# Test 6: Complex transformation
test_endpoint "Complex string transformation" "/user%20email%20address/replace:%20:_/camelCase" "userEmailAddress"

# Test 7: Text cleaning using replaceAll
test_endpoint "Text cleaning with replaceAll" "/%20%20%20messy%20text%20%20%20/trim/replaceAll:%20:-/toUpper" "MESSY-TEXT"

# Test 8: Simple methods without args
test_endpoint "Simple uppercase" "/hello/upperCase" "HELLO"

# Test 9: kebabCase
test_endpoint "KebabCase transformation" "/HelloWorld/kebabCase" "hello-world"

# Test 10: Multiple replacements using replaceAll
test_endpoint "Multiple replacements with replaceAll" "/hello_world_test/replaceAll:_:%20/replaceAll:%20:-/toUpper" "HELLO-WORLD-TEST"

# Test 11: Sort an array
test_endpoint "Sort an array" "/1,2,5,3,,4/split:,/compact/sort/join:," "1,2,3,4,5"

# Test 12: Range from 12 to 20, then slice to get a subset
test_endpoint "Range 12-20 then slice 2-5" "/_/range:12:21/slice:2:5/join:," "14,15,16"

echo
echo "===================================="
echo "Test Results:"
echo -e "Passed: ${GREEN}$PASSED${NC}"
echo -e "Failed: ${RED}$FAILED${NC}"

if [ $FAILED -eq 0 ]; then
  echo -e "${GREEN}All tests passed! ðŸŽ‰${NC}"
  exit 0
else
  echo -e "${RED}Some tests failed! ðŸ˜ž${NC}"
  exit 1
fi
