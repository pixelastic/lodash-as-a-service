#!/bin/env zsh

# Test suite for Lodash as a Service
# New syntax: /{input}/{method1:arg1:arg2}/{method2}/...

BASE_URL="http://localhost:3000"
PASSED=0
FAILED=0

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Display test result
display_test_result() {
  local description="$1"
  local expected="$2"
  local actual="$3"
  local context="$4"

  echo -n "Testing: $description... "

  if [ "$actual" = "$expected" ]; then
    echo -e "${GREEN}âœ“ PASS${NC}"
    ((PASSED++))
  else
    echo -e "${RED}âœ— FAIL${NC}"
    echo "  $context"
    echo "  Expected: '$expected'"
    echo "  Got:      '$actual'"
    ((FAILED++))
  fi
}

# Test function for GET requests
test_get_endpoint() {
  local description="$1"
  local url="$2"
  local expected="$3"

  # Make request and extract result field
  local actual=$(curl -s "$BASE_URL$url" | jq -r '.result' 2>/dev/null)

  display_test_result "$description" "$expected" "$actual" "URL: $BASE_URL$url"
}

# Test function for POST requests
test_post_endpoint() {
  local description="$1"
  local payload="$2"
  local expected="$3"

  # Make POST request and extract result field with compact format
  local actual=$(curl -s -X POST "$BASE_URL/" -H "Content-Type: application/json" -d "$payload" | jq -c '.result' 2>/dev/null)

  display_test_result "$description" "$expected" "$actual" "Payload: $payload"
}

# Test if server is running
echo "Checking if server is running..."
if ! curl -s "$BASE_URL/health" >/dev/null; then
  echo -e "${RED}Error: Server not running on $BASE_URL${NC}"
  echo "Please run: npm start"
  exit 1
fi
echo -e "${GREEN}Server is running!${NC}"
echo

# Run tests
echo "Running Lodash as a Service tests..."
echo "===================================="

# Test GET 1: Simple camelCase (main use case)
test_get_endpoint "Simple camelCase" "/hello_world/camelCase" "helloWorld"

# Test GET 2: Chain with replace
test_get_endpoint "Replace then camelCase" "/user_first_name/replace:_:%20/camelCase" "userFirstName"

# Test GET 3: Spaces handling
test_get_endpoint "Spaces with trim and camelCase" "/hello%20world/trim/camelCase/upperFirst" "HelloWorld"

# Test GET 4: String manipulation with arguments (using take instead of slice)
test_get_endpoint "PadStart then take" "/hello/padStart:10:*/split:/take:8/join:" "*****hel"

# Test GET 5: Array operations via split
test_get_endpoint "Array operations" "/1,2,null,3,,4/split:,/compact/join:," "1,2,null,3,4"

# Test GET 6: Complex transformation
test_get_endpoint "Complex string transformation" "/user%20email%20address/replace:%20:_/camelCase" "userEmailAddress"

# Test GET 7: Text cleaning using replaceAll
test_get_endpoint "Text cleaning with replaceAll" "/%20%20%20messy%20text%20%20%20/trim/replaceAll:%20:-/toUpper" "MESSY-TEXT"

# Test GET 8: Simple methods without args
test_get_endpoint "Simple uppercase" "/hello/upperCase" "HELLO"

# Test GET 9: kebabCase
test_get_endpoint "KebabCase transformation" "/HelloWorld/kebabCase" "hello-world"

# Test GET 10: Multiple replacements using replaceAll
test_get_endpoint "Multiple replacements with replaceAll" "/hello_world_test/replaceAll:_:%20/replaceAll:%20:-/toUpper" "HELLO-WORLD-TEST"

# Test GET 11: Sort an array
test_get_endpoint "Sort an array" "/1,2,5,3,,4/split:,/compact/sort/join:," "1,2,3,4,5"

# Test GET 12: Range from 12 to 20, then slice to get a subset
test_get_endpoint "Range 12-20 then slice 2-5" "/_/range:12:21/slice:2:5/join:," "14,15,16"

# Test GET 13: Map with @ function
test_get_endpoint "GET map with @ function" "/hello,world/split:,/map:@upperCase/join:," "HELLO,WORLD"

# Test GET 14: SortBy with property  
test_get_endpoint "GET sortBy with property" "/30,20,25/split:,/sortBy:@parseInt/join:," "20,25,30"

# POST Tests
echo
echo "Testing POST endpoints:"

# Test POST 1: Simple POST camelCase
test_post_endpoint "POST camelCase" '{"input":"hello_world","methods":["camelCase"]}' '"helloWorld"'

# Test POST 2: POST with chain
test_post_endpoint "POST replace then camelCase" '{"input":"user_first_name","methods":["replace:_: ","camelCase"]}' '"userFirstName"'

# Test POST 3: POST range and slice
test_post_endpoint "POST range and slice" '{"input":"_","methods":["range:12:21","slice:2:5","join:,"]}' '"14,15,16"'

# Test POST 4: POST nested arrays with map
test_post_endpoint "POST nested arrays with map" '{"input":"hello,world","methods":["split:,",["map",["@upperCase"]]]}' '["HELLO","WORLD"]'

# Test POST 5: POST complex nested transformation
test_post_endpoint "POST complex nested transformation" '{"input":"key1=val1;key2=val2","methods":["split:;",["map",["@split:="]],["map",["@head"]]]}' '["key1","key2"]'

echo
echo "Testing new @ syntax for map:"

# Test POST 6: Map with property (string shorthand)
test_post_endpoint "POST map property shorthand" '{"input":[{"name":"Alice","age":30},{"name":"Bob","age":25}],"methods":["map:name"]}' '["Alice","Bob"]'

# Test POST 7: Map with function using @ syntax
test_post_endpoint "POST map function with @" '{"input":["hello","world"],"methods":["map:@upperCase"]}' '["HELLO","WORLD"]'

# Test POST 8: Map with nested path
test_post_endpoint "POST map nested property" '{"input":[{"user":{"name":"Alice"}},{"user":{"name":"Bob"}}],"methods":["map:user.name"]}' '["Alice","Bob"]'

# Test POST 9: Map with array of transformations
test_post_endpoint "POST map with transformation chain" '{"input":"user_name|john;user_email|test","methods":["split:;",["map",["@split:|","@head","@replace:user_:","@upperCase"]]]}' '["NAME","EMAIL"]'

# Test POST 10: Test renameKey with map
test_post_endpoint "POST map with renameKey" '{"input":[{"content":"Hello","id":1},{"content":"World","id":2}],"methods":[["map",["@renameKey:content:text"]]]}' '[{"id":1,"text":"Hello"},{"id":2,"text":"World"}]'

echo
echo "Testing new chain methods:"

# Test POST 11: Filter with function
test_post_endpoint "POST filter with function" '{"input":["apple","banana","avocado","cherry"],"methods":[["filter",["@startsWith:a"]]]}' '["apple","avocado"]'

# Test POST 12: Find with property
test_post_endpoint "POST find with property" '{"input":[{"name":"Bob","age":25},{"name":"Alice","age":30}],"methods":[["find",{"name":"Alice"}]]}' '{"name":"Alice","age":30}'

# Test POST 13: SortBy with property
test_post_endpoint "POST sortBy with property" '{"input":[{"age":30},{"age":20},{"age":25}],"methods":["sortBy:age"]}' '[{"age":20},{"age":25},{"age":30}]'

# Test POST 14: GroupBy with property
test_post_endpoint "POST groupBy with property" '{"input":["a","bb","cc","d"],"methods":["groupBy:length"]}' '{"1":["a","d"],"2":["bb","cc"]}'

echo
echo "===================================="
echo "Test Results:"
echo -e "Passed: ${GREEN}$PASSED${NC}"
echo -e "Failed: ${RED}$FAILED${NC}"

if [ $FAILED -eq 0 ]; then
  echo -e "${GREEN}All tests passed! ðŸŽ‰${NC}"
  exit 0
else
  echo -e "${RED}Some tests failed! ðŸ˜ž${NC}"
  exit 1
fi
